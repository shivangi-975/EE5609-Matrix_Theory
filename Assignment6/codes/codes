import numpy as np
from numpy import matrix as m
import matplotlib.pyplot as plt
from numpy import linalg as LA

import sys                                          #for path to external scripts
sys.path.insert(0, '/storage/emulated/0/tlc/school/ncert/linman/codes/CoordGeo')        #path to my scripts


#Generating points on an ellipse
def ellipse_gen(a,b):
    len = 50
    theta = np.linspace(0,2*np.pi,len)
    x_ellipse = np.zeros((2,len))
    x_ellipse[0,:] = a*np.cos(theta)
    x_ellipse[1,:] = b*np.sin(theta)
    return x_ellipse

#setting up plot
fig = plt.figure()
ax = fig.add_subplot(111, aspect='equal')
len = 100
y = np.linspace(-5,5,len)

#Given Points
# p = np.array(([4,3]))
# q = np.array(([-1,4]))
# P = np.diag(p)
# Q = np.diag(q)
c = np.array(([0,0]))
V = np.array(([2,-1.5],[-1.5,4]))
u = np.array(([5,-9.5]))
f = 23
cs = -LA.inv(V)@u
cst = cs[np.newaxis, :].T
#Eigenvalues and eigenvectors
D_vec,P= LA.eig(V)
D = np.diag(D_vec)

# dA = np.block([[p@P],[q@Q]])
# db = np.array(([1,1]))

#Ellipse parameters
# d = LA.solve(dA,db)
a = np.sqrt(1/D_vec[0])
b = np.sqrt(1/D_vec[1])
xStandardEllipse = ellipse_gen(a,b)

#Major and Minor Axes
MajorStandard = np.array(([a,0]))
MinorStandard = np.array(([0,b]))
#
#Affine transform
# cs = np.array([[-1],
#               [2]])
xActualEllipse = P@xStandardEllipse+cst
MajorActual = P@MajorStandard+cst[0]
MinorActual = P@MinorStandard+cst[1]
#Plotting the standard ellipse
plt.plot(xStandardEllipse[0,:],xStandardEllipse[1,:],label='Standard ellipse')
#Plotting the actual ellipse
plt.plot(xActualEllipse[0,:],xActualEllipse[1,:],label='Actual ellipse')

#Labeling the coordinates
tri_coords = np.vstack((c,cs)).T
plt.scatter(tri_coords[0,:], tri_coords[1,:])
vert_labels = ['$c$','$c^{\prime}$']
for i, txt in enumerate(vert_labels):
    plt.annotate(txt, # this is the text
                 (tri_coords[0,i], tri_coords[1,i]), # this is the point to label
                 textcoords="offset points", # how to position the text
                 xytext=(0,10), # distance from text to points (x,y)
                 ha='center') # horizontal alignment can be left, right or center

plt.xlabel('$x$')
plt.ylabel('$y$')
plt.legend(loc='best')
plt.grid() # minor
plt.axis('equal')
plt.show()

