import numpy as np
import matplotlib.pyplot as plt
from numpy import linalg as LA

import sys                                          #for path to external scripts
sys.path.insert(0, '/storage/emulated/0/tlc/school/ncert/linman/codes/CoordGeo')        #path to my scripts


#local imports
# from line.funcs import *
# from triangle.funcs import *
# from conics.funcs import *

def ellipse_gen(a,b):
    len = 50
    theta = np.linspace(0,2*np.pi,len)
    x_ellipse = np.zeros((2,len))
    x_ellipse[0,:] = a*np.cos(theta)
    x_ellipse[1,:] = b*np.sin(theta)
    return x_ellipse
#setting up plot
fig = plt.figure()
ax = fig.add_subplot(111, aspect='equal')
len = 100
y = np.linspace(-50,50,len)

#Ellipse parameters
V = 1/2*np.array(([2,1],[1,2]))
u = np.array(([0,0]))
f = -100
c = -LA.inv(V)@u
#Eigenvalues and eigenvectors
D_vec,P= LA.eig(V)
D = np.diag(D_vec)

a = np.sqrt(-f/D_vec[0])
b = np.sqrt(-f/D_vec[1])
xStandardEllipse = ellipse_gen(a,b)

#Major and Minor Axes
MajorStandard = np.array(([a,0]))
MinorStandard = np.array(([0,b]))

#Affine transform
cs = np.array([[-1],
              [2]])
xActualEllipse = xStandardEllipse+cs
MajorActual = MajorStandard+cs[0]
MinorActual = MinorStandard+cs[1]

#

#Plotting the standard ellipse
plt.plot(xStandardEllipse[0,:],xStandardEllipse[1,:],label='Standard ellipse')

#Plotting the actual ellipse
plt.plot(xActualEllipse[0,:],xActualEllipse[1,:],label='Actual ellipse')

#Labeling the coordinates
tri_coords = np.vstack((MajorStandard,MinorStandard,MajorActual,MinorActual,c)).T
plt.scatter(tri_coords[0,:], tri_coords[1,:])
vert_labels = ['$a$','$b$','$a^{\prime}$','$b^{\prime}$','$\mathbf{c}$']
for i, txt in enumerate(vert_labels):
    plt.annotate(txt, # this is the text
                 (tri_coords[0,i], tri_coords[1,i]), # this is the point to label
                 textcoords="offset points", # how to position the text
                 xytext=(5,5), # distance from text to points (x,y)
                 ha='center') # horizontal alignment can be left, right or center

x_axis = np.linspace(-10,10,5)
y_axis = np.linspace(-20,20,7)
y_1 = [0 for i in range(5)]          
x_1 = [0 for i in range(7)]          
plt.plot(x_axis, y_1, 'black')
plt.plot(x_1,y_axis, 'black')
plt.xlabel('$x$')
plt.ylabel('$y$')
plt.legend(loc='best')
plt.scatter(-1,2,color='b')
plt.annotate('$c^{\prime}$',(-1,2),textcoords="offset points",xytext=(0,5),ha='center')
plt.grid() # minor
plt.axis('equal')
plt.show()

	
	
